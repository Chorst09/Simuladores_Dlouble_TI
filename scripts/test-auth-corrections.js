#!/usr/bin/env node

/**
 * Script para testar as corre√ß√µes do sistema de autentica√ß√£o
 */

const fs = require('fs');

console.log('üß™ Testando corre√ß√µes do sistema de autentica√ß√£o...\n');

// Verificar se as fun√ß√µes est√£o exportadas corretamente no auth.ts
console.log('1. Verificando exporta√ß√µes do auth.ts...');

const authContent = fs.readFileSync('src/lib/auth.ts', 'utf8');

const requiredExports = [
  'ErrorResponses',
  'requireAuthEnhanced',
  'validateResourceAccess',
  'checkOwnership',
  'logAccessAttempt'
];

let allExportsFound = true;

requiredExports.forEach(exportName => {
  if (authContent.includes(`export ${exportName}`) || authContent.includes(`export const ${exportName}`) || authContent.includes(`export async function ${exportName}`)) {
    console.log(`‚úÖ ${exportName} encontrado`);
  } else {
    console.log(`‚ùå ${exportName} N√ÉO encontrado`);
    allExportsFound = false;
  }
});

if (allExportsFound) {
  console.log('‚úÖ Todas as exporta√ß√µes necess√°rias est√£o presentes');
} else {
  console.log('‚ùå Algumas exporta√ß√µes est√£o faltando');
}

// Verificar se as importa√ß√µes est√£o corretas nos arquivos de API
console.log('\n2. Verificando importa√ß√µes nos arquivos de API...');

const apiFiles = [
  'src/app/api/users/route.ts',
  'src/app/api/users/[id]/route.ts',
  'src/app/api/proposals/route.ts',
  'src/app/api/proposals/[id]/route.ts'
];

apiFiles.forEach(filePath => {
  if (fs.existsSync(filePath)) {
    const content = fs.readFileSync(filePath, 'utf8');
    
    if (content.includes('ErrorResponses') && content.includes('requireAuthEnhanced')) {
      console.log(`‚úÖ ${filePath} - importa√ß√µes corretas`);
    } else {
      console.log(`‚ùå ${filePath} - importa√ß√µes incorretas ou faltando`);
    }
  } else {
    console.log(`‚ùå ${filePath} - arquivo n√£o encontrado`);
  }
});

// Verificar se o directorDiscountData foi corrigido
console.log('\n3. Verificando corre√ß√£o do directorDiscountData...');

const radioCalculatorPath = 'src/components/calculators/RadioInternetCalculator.tsx';
if (fs.existsSync(radioCalculatorPath)) {
  const content = fs.readFileSync(radioCalculatorPath, 'utf8');
  
  if (content.includes('const [directorDiscountData, setDirectorDiscountData]')) {
    console.log('‚úÖ Estado directorDiscountData definido');
  } else {
    console.log('‚ùå Estado directorDiscountData n√£o encontrado');
  }
  
  if (content.includes('director_discount: directorDiscountData')) {
    console.log('‚úÖ directorDiscountData usado na fun√ß√£o saveProposal');
  } else {
    console.log('‚ùå directorDiscountData n√£o usado corretamente');
  }
} else {
  console.log('‚ùå RadioInternetCalculator.tsx n√£o encontrado');
}

console.log('\n4. Verificando estrutura da tabela access_logs...');

const migrationPath = 'database/migrations/create_access_logs_table.sql';
if (fs.existsSync(migrationPath)) {
  console.log('‚úÖ Migra√ß√£o da tabela access_logs encontrada');
} else {
  console.log('‚ùå Migra√ß√£o da tabela access_logs n√£o encontrada');
}

console.log('\n‚úÖ Verifica√ß√£o conclu√≠da!');
console.log('\nüìù Pr√≥ximos passos para testar:');
console.log('1. Execute: npm run dev');
console.log('2. Teste o login como diretor');
console.log('3. Teste a calculadora de Internet via R√°dio');
console.log('4. Verifique se n√£o h√° mais erros de directorDiscountData');
console.log('5. Teste as APIs de usu√°rios e propostas com diferentes roles');